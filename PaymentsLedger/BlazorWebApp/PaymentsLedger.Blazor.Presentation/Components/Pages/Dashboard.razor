@page "/dashboard"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]
@layout AppLayout
@inject ILogger<Dashboard> Logger
@inject IPaymentsEventHandler Events
@using System.Security.Claims

<h1 class="text-2xl font-semibold text-gray-900">Dashboard</h1>

<AuthorizeView>
  <Authorized>
    @{
      var merchantId = MapUserToMerchant(context.User);
      var stats = merchantId.HasValue ? Events.GetStats(merchantId.Value) : default(PaymentStats);
    }
    <div class="mt-4 space-y-2">
      <p class="text-gray-700">Hello, @context.User.Identity?.Name!</p>
      @if (merchantId is null)
      {
        <p class="text-red-600">No merchant mapping for this user in demo.</p>
      }
      else
      {
        <p class="text-gray-700">Payments received: <span class="font-semibold">@stats.ReceivedCount</span></p>
        <p class="text-gray-700">Total amount: <span class="font-semibold">@stats.TotalAmount</span> @stats.LastCurrency</p>
        @if (!string.IsNullOrEmpty(stats.LastEventJson))
        {
          <details class="mt-2">
            <summary class="cursor-pointer text-sm text-gray-600">Last event payload</summary>
            <pre class="bg-gray-50 p-2 rounded text-xs overflow-auto">@stats.LastEventJson</pre>
          </details>
        }
      }
    </div>
  </Authorized>
  <NotAuthorized>
    <p class="mt-4 text-red-600">You're not authorized.</p>
  </NotAuthorized>
  <Authorizing>
    <p class="mt-4 text-gray-500">Authorizing...</p>
  </Authorizing>
</AuthorizeView>

@code {
  private IDisposable? _sub;

  protected override Task OnInitializedAsync()
  {
    // Subscribe to changes from the shared handler
    Events.Changed += OnEventsChanged;
    return Task.CompletedTask;
  }

  private void OnEventsChanged()
  {
    _ = InvokeAsync(StateHasChanged);
  }

  public async ValueTask DisposeAsync()
  {
    Events.Changed -= OnEventsChanged;
  }

  private static Guid? MapUserToMerchant(ClaimsPrincipal user)
  {
    var name = user.Identity?.Name?.Trim().ToLowerInvariant();
    return name switch
    {
      // Demo mapping: standard -> 2222..., premium -> 1111...
      "standard@demo.local" => Guid.Parse("22222222-2222-2222-2222-222222222222"),
      "premium@demo.local" => Guid.Parse("11111111-1111-1111-1111-111111111111"),
      _ => null
    };
  }
}
