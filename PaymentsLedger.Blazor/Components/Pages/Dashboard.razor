@page "/dashboard"
@attribute [Authorize]


<PageTitle>Dashboard</PageTitle>

<AuthorizeView>
  <Authorized Context="ctx">
    <div class="space-y-3">
      <h1 class="text-2xl font-semibold">Dashboard</h1>
      <p class="text-gray-700">Signed in as: <span class="font-medium">@GetEmail(ctx.User)</span></p>
      @if (ctx.User?.Identity?.IsAuthenticated ?? false)
      {
        var roles = ctx.User!.Claims.Where(c => c.Type == System.Security.Claims.ClaimTypes.Role).Select(c =>
        c.Value).ToArray();
        <div>
          <p class="text-gray-700 mb-1">Roles:</p>
          @if (roles.Length == 0)
          {
            <span class="text-gray-500">(none)</span>
          }
          else
          {
            <ul class="list-disc list-inside text-gray-700">
              @foreach (var r in roles)
              {
                <li>@r</li>
              }
            </ul>
          }
        </div>
      }
    </div>
  </Authorized>
  <NotAuthorized>
    <div class="text-red-600">You are not authorized to view this page.</div>
  </NotAuthorized>
</AuthorizeView>

@code {
  private static string GetEmail(System.Security.Claims.ClaimsPrincipal user)
  => user?.Identity?.IsAuthenticated == true
  ? (user.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Name)?.Value ?? "(unknown)")
  : "(anonymous)";
}