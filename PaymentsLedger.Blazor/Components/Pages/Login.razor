@page "/login"
@using Azure.Messaging.ServiceBus
@using System.Security.Claims
@using System.Text.Json
@using Microsoft.Extensions.Logging
@inject PaymentsLedger.Blazor.Services.IBlazorServiceBusMessenger Bus
@inject PaymentsLedger.Blazor.Services.CustomAuthenticationService Auth
@inject NavigationManager Nav
@implements IDisposable
@inject ILogger<Login> Logger

<h1 class="text-2xl font-semibold mb-4">Sign in</h1>

@if (!string.IsNullOrEmpty(ValidationError))
{
  <div class="text-red-600 mb-3">@ValidationError</div>
}
@if (!string.IsNullOrEmpty(ServerStatus))
{
  <div class="text-red-600 mb-3">Login failed: @ServerStatus</div>
}

<form @onsubmit="OnSubmitAsync">
  <div class="mb-3">
    <label class="block mb-1" for="email">Email</label>
    <input id="email" class="border rounded p-2 w-full" type="email" @bind="Email" required />
  </div>
  <div class="mb-4">
    <label class="block mb-1" for="password">Password</label>
    <input id="password" class="border rounded p-2 w-full" type="password" @bind="Password" required />
    <p class="text-sm text-gray-600 mt-2">Password must be at least 12 characters, include a digit, an uppercase and a
      lowercase letter.</p>
  </div>
  <button class="bg-blue-600 text-white px-4 py-2 rounded disabled:opacity-50" disabled="@IsSubmitting"
    type="submit">@ButtonText</button>
</form>

@code {
  private string Email { get; set; } = string.Empty;
  private string Password { get; set; } = string.Empty;
  private string? ValidationError { get; set; }
  private bool IsSubmitting { get; set; }
  private string? ServerStatus { get; set; }

  private string ButtonText => IsSubmitting ? "Submitting..." : "Sign in";

  private IDisposable? _subscription;
  private string? _pendingCorrelationId;

  protected override void OnInitialized()
  {
    Logger.LogInformation("[Login] Subscribing to auth.login.result replies");
    _subscription = Bus.SubscribeToReplies(async (msg, ct) =>
    {
      if (!string.Equals(msg.Subject, "auth.login.result", StringComparison.OrdinalIgnoreCase))
        return;

      if (string.IsNullOrEmpty(_pendingCorrelationId) || msg.CorrelationId != _pendingCorrelationId)
        return;

      var result = JsonSerializer.Deserialize<LoginResultDto>(msg.Body);
      if (result is null)
        return;

      await InvokeAsync(() =>
  {
      Logger.LogInformation("[Login] Received login result corrId={CorrelationId} status={Status}", msg.CorrelationId, result.status);
      if (string.Equals(result.status, "Succeeded", StringComparison.OrdinalIgnoreCase))
      {
        var claims = new List<Claim>
    {
new Claim(ClaimTypes.NameIdentifier, result.userId?.ToString() ?? string.Empty),
new Claim(ClaimTypes.Name, result.email ?? string.Empty)
    };
        if (result.roles is not null)
        {
          foreach (var role in result.roles)
          {
            claims.Add(new Claim(ClaimTypes.Role, role));
          }
        }

        var principal = new ClaimsPrincipal(new ClaimsIdentity(claims, "Bus"));
        Auth.CurrentUser = principal;
        Logger.LogInformation("[Login] Success for {Email}; roles={Roles}", result.email ?? string.Empty, string.Join(',', result.roles ?? Array.Empty<string>()));
      // Navigate to dashboard after sign-in
        Nav.NavigateTo("/dashboard", forceLoad: false);
      }
      else
      {
        Logger.LogWarning("[Login] Failed with status {Status}", result.status);
        ServerStatus = result.status;
      }
    });
    });
  }

  private async Task OnSubmitAsync()
  {
    ValidationError = null;

    // Basic client-side validation matching server policy
    var validationError = ValidatePassword(Password);
    if (!string.IsNullOrEmpty(validationError))
    {
      ValidationError = validationError;
      return;
    }

    if (string.IsNullOrWhiteSpace(Email) || !Email.Contains('@'))
    {
      ValidationError = "Please enter a valid email address.";
      return;
    }

    IsSubmitting = true;
    try
    {
      var correlationId = Guid.NewGuid().ToString("N");
      _pendingCorrelationId = correlationId;
      var payload = System.Text.Json.JsonSerializer.Serialize(new
      {
        type = "LoginAttempt",
        email = Email,
        password = Password,
        correlationId
      });

      var message = new ServiceBusMessage(BinaryData.FromString(payload))
      {
        ContentType = "application/json",
        Subject = "auth.login",
        CorrelationId = correlationId
      };

      Logger.LogInformation("[Login] Sending auth.login corrId={CorrelationId} email={Email}", correlationId, Email);
      await Bus.SendMerchantCommandAsync(message);

      // Stage 1: We only send; reply handling is wired separately
    }
    finally
    {
      IsSubmitting = false;
    }
  }

  private static string? ValidatePassword(string pwd)
  {
    if (string.IsNullOrEmpty(pwd) || pwd.Length < 12)
      return "Password must be at least 12 characters long.";
    if (!pwd.Any(char.IsDigit))
      return "Password must contain at least one digit.";
    if (!pwd.Any(char.IsUpper))
      return "Password must contain at least one uppercase letter.";
    if (!pwd.Any(char.IsLower))
      return "Password must contain at least one lowercase letter.";
    return null;
  }
}

@code {
  private sealed class LoginResultDto
  {
    public string status { get; set; } = string.Empty;
    public Guid? userId { get; set; }
    public string? email { get; set; }
    public string[]? roles { get; set; }
  }
}

@code
{
  public void Dispose()
  {
    _subscription?.Dispose();
    Logger.LogInformation("[Login] Disposed and unsubscribed");
  }
}
